# intentional type-check-only deviations from runtime
numpy\.__numtype__
numpy\._typing.*

# internal testing code
numpy\.conftest
numpy(\.\w+)?\.tests.*
numpy\.random\._generator\.__test__

# workaround for the `dtype.type` generic class-attribute that's `None` unless instantiated
numpy(\..+)?\.dtype\.type

# system-dependent extended precision types
numpy(\..+)?\.float(96|128)
numpy(\..+)?\.complex(192|256)

# these are always either missing float96/complex192 or float128/complex256
numpy\.__all__
numpy\._?core\.__all__
numpy\._?core\.numeric\.__all__
numpy\._?core\.numerictypes\.__all__
numpy\.matlib\.__all__

# requires numpy/_core/code_generators to be on the PYTHONPATH when running stubtest
numpy\._core\.cversions

# mypy plugin
numpy\.typing\.mypy_plugin

# workaround mypy's lack of Python 3.13 support for `NamedTuple` types (mypy <= 1.15.0)
numpy(\.\w+)+\.__replace__

# workaround for https://github.com/python/mypy/issues/15302#issuecomment-2701979355
numpy\.testing(\._private\.utils)?\.check_support_sve

# workaround for stubtest ignoring `if sys.version_info` blocks in `_typeshed` when
# `python_version`
numpy\.compat(\.py3k)?\.(Path|os_PathLike|bytes)\.[_a-zA-Z]+
numpy\.testing\.TestCase\.[_a-zA-Z]+
