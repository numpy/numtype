numpy\.__numtype__
numpy\.polynomial\._polytypes
numpy\._typing.*
numpy\.typing\.mypy_plugin

# internal testing code
numpy\.conftest
numpy(\.\w+)?\.tests.*
numpy.random._generator.__test__

# workaround for the `dtype.type` generic class-attribute that's `None` unless instantiated
numpy(\..+)?\.dtype\.type

# system-dependent extended precision types
numpy(\..+)?\.float(96|128)
numpy(\..+)?\.complex(192|256)

# these are always either missing float96/complex192 or float128/complex256
numpy\.__all__
numpy\._?core\.__all__
numpy\._?core\.numeric\.__all__
numpy\._?core\.numerictypes\.__all__
numpy\.matlib\.__all__

# requires numpy/_core/code_generators to be on the PYTHONPATH when running stubtest
numpy\._core\.cversions

# workaround mypy's lack of Python 3.13 support for `NamedTuple` types (mypy <= 1.15.0)
numpy\._core\.overrides\.ArgSpec\.__replace__
numpy\._utils\._pep440\._Version\.__replace__
numpy\.lib\._arraysetops_impl\.Unique(All|Counts|Inverse)Result\.__replace__
numpy\.linalg\._linalg\.(Eig|Eigh|QR|SVD|Slogdet)Result\.__replace__
