from collections.abc import Callable, Iterable
from typing import Any, Concatenate, Final, Literal as L, SupportsIndex as CanIndex, overload
from typing_extensions import Self, TypeVar

import numpy as np
from _numtype import (
    Array,
    Array_1d,
    Array_2d,
    CoComplex128_0d,
    CoComplex128_1d,
    CoComplex_0d,
    CoComplex_1d,
    CoComplex_1nd,
    CoComplex_nd,
    CoFloat64_0d,
    CoFloat64_1d,
    CoFloat64_1nd,
    CoFloat64_nd,
    CoFloating_0d,
    CoFloating_1d,
    CoFloating_1nd,
    CoFloating_nd,
    CoIntP_0d,
    CoInteger_0d,
    CoInteger_1d,
    CoInteger_nd,
    ToComplex128_0d,
    ToComplex128_1d,
    ToComplex128_nd,
    ToComplex_0d,
    ToComplex_1d,
    ToComplex_1nd,
    ToComplex_nd,
    ToFloat64_0d,
    ToFloat64_1d,
    ToFloat64_1nd,
    ToFloat64_nd,
    ToFloating_0d,
    ToFloating_1d,
    ToFloating_nd,
    ToIntP_0d,
    ToObject_0d,
    ToObject_1d,
    ToObject_1nd,
    ToObject_nd,
    ToReal_1d,
)
from numpy._typing import _ArrayLike

from ._polybase import ABCPolyBase
from ._polytypes import _ArrayAndFitResult, _Indices, _ToNumeric_0d, _ToNumeric_1d, _ToNumeric_nd
from .polyutils import trimcoef as chebtrim

__all__ = [
    "Chebyshev",
    "cheb2poly",
    "chebadd",
    "chebcompanion",
    "chebder",
    "chebdiv",
    "chebdomain",
    "chebfit",
    "chebfromroots",
    "chebgauss",
    "chebgrid2d",
    "chebgrid3d",
    "chebint",
    "chebinterpolate",
    "chebline",
    "chebmul",
    "chebmulx",
    "chebone",
    "chebpow",
    "chebpts1",
    "chebpts2",
    "chebroots",
    "chebsub",
    "chebtrim",
    "chebval",
    "chebval2d",
    "chebval3d",
    "chebvander",
    "chebvander2d",
    "chebvander3d",
    "chebweight",
    "chebx",
    "chebzero",
    "poly2cheb",
]

###

chebdomain: Final[Array_1d[np.float64]] = ...
chebzero: Final[Array_1d[np.intp]] = ...
chebone: Final[Array_1d[np.intp]] = ...
chebx: Final[Array_1d[np.intp]] = ...

###

class Chebyshev(ABCPolyBase):
    domain: Array_1d[np.float64] = ...  # pyright: ignore[reportIncompatibleMethodOverride]
    window: Array_1d[np.float64] = ...  # pyright: ignore[reportIncompatibleMethodOverride]
    basis_name: L["T"] = "T"  # pyright: ignore[reportIncompatibleMethodOverride]

    @classmethod
    def interpolate(
        cls,
        func: np.ufunc | Callable[Concatenate[Array_1d[np.float64], ...], _ToNumeric_1d],
        deg: CoInteger_0d,
        domain: CoComplex_1d | None = None,
        args: Iterable[Any] = (),
    ) -> Self: ...

###

#
@overload
def poly2cheb(pol: ToFloat64_1d | CoInteger_1d) -> Array_1d[np.float64]: ...
@overload
def poly2cheb(pol: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def poly2cheb(pol: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def poly2cheb(pol: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def poly2cheb(pol: CoComplex_1d) -> Array_1d[np.inexact]: ...
@overload
def poly2cheb(pol: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def cheb2poly(c: ToFloat64_1d | CoInteger_1d) -> Array_1d[np.float64]: ...
@overload
def cheb2poly(c: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def cheb2poly(c: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def cheb2poly(c: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def cheb2poly(c: CoComplex_1d) -> Array_1d[np.inexact]: ...
@overload
def cheb2poly(c: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebline(off: ToIntP_0d, scl: CoIntP_0d) -> Array_1d[np.intp]: ...
@overload
def chebline(off: CoIntP_0d, scl: ToIntP_0d) -> Array_1d[np.intp]: ...
@overload
def chebline(off: CoInteger_0d, scl: CoInteger_0d) -> Array_1d[np.integer]: ...
@overload
def chebline(off: ToFloat64_0d, scl: CoFloat64_0d) -> Array_1d[np.float64]: ...
@overload
def chebline(off: CoFloat64_0d, scl: ToFloat64_0d) -> Array_1d[np.float64]: ...
@overload
def chebline(off: ToFloating_0d, scl: CoFloating_0d) -> Array_1d[np.floating]: ...
@overload
def chebline(off: CoFloating_0d, scl: ToFloating_0d) -> Array_1d[np.floating]: ...
@overload
def chebline(off: ToComplex128_0d, scl: CoComplex128_0d) -> Array_1d[np.complex128]: ...
@overload
def chebline(off: CoComplex128_0d, scl: ToComplex128_0d) -> Array_1d[np.complex128]: ...
@overload
def chebline(off: ToComplex_0d, scl: CoComplex_0d) -> Array_1d[np.complexfloating]: ...
@overload
def chebline(off: CoComplex_0d, scl: ToComplex_0d) -> Array_1d[np.complexfloating]: ...
@overload
def chebline(off: CoComplex_0d, scl: CoComplex_0d) -> Array_1d[np.number]: ...
@overload
def chebline(off: ToObject_0d, scl: ToObject_0d) -> Array_1d[np.object_]: ...

#
@overload
def chebfromroots(roots: ToFloat64_1d | CoInteger_1d) -> Array_1d[np.float64]: ...
@overload
def chebfromroots(roots: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebfromroots(roots: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebfromroots(roots: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebfromroots(roots: CoComplex_1d) -> Array_1d[np.inexact]: ...
@overload
def chebfromroots(roots: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebadd(c1: ToFloat64_1d, c2: CoFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebadd(c1: CoFloat64_1d, c2: ToFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebadd(c1: ToReal_1d, c2: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebadd(c1: CoFloating_1d, c2: ToReal_1d) -> Array_1d[np.floating]: ...
@overload
def chebadd(c1: ToComplex128_1d, c2: CoComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebadd(c1: CoComplex128_1d, c2: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebadd(c1: ToComplex_1d, c2: CoComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebadd(c1: CoComplex_1d, c2: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebadd(c1: ToObject_1d, c2: _ToNumeric_1d) -> Array_1d[np.object_]: ...
@overload
def chebadd(c1: _ToNumeric_1d, c2: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebsub(c1: ToFloat64_1d, c2: CoFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebsub(c1: CoFloat64_1d, c2: ToFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebsub(c1: ToReal_1d, c2: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebsub(c1: CoFloating_1d, c2: ToReal_1d) -> Array_1d[np.floating]: ...
@overload
def chebsub(c1: ToComplex128_1d, c2: CoComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebsub(c1: CoComplex128_1d, c2: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebsub(c1: ToComplex_1d, c2: CoComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebsub(c1: CoComplex_1d, c2: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebsub(c1: ToObject_1d, c2: _ToNumeric_1d) -> Array_1d[np.object_]: ...
@overload
def chebsub(c1: _ToNumeric_1d, c2: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebmulx(c: ToFloat64_1d | CoInteger_1d) -> Array_1d[np.float64]: ...
@overload
def chebmulx(c: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebmulx(c: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebmulx(c: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebmulx(c: CoComplex_1d) -> Array_1d[np.inexact]: ...
@overload
def chebmulx(c: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebmul(c1: ToFloat64_1d, c2: CoFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebmul(c1: CoFloat64_1d, c2: ToFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebmul(c1: ToReal_1d, c2: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebmul(c1: CoFloating_1d, c2: ToReal_1d) -> Array_1d[np.floating]: ...
@overload
def chebmul(c1: ToComplex128_1d, c2: CoComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebmul(c1: CoComplex128_1d, c2: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebmul(c1: ToComplex_1d, c2: CoComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebmul(c1: CoComplex_1d, c2: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebmul(c1: ToObject_1d, c2: _ToNumeric_1d) -> Array_1d[np.object_]: ...
@overload
def chebmul(c1: _ToNumeric_1d, c2: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebdiv(c1: ToFloat64_1d, c2: CoFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebdiv(c1: CoFloat64_1d, c2: ToFloat64_1d) -> Array_1d[np.float64]: ...
@overload
def chebdiv(c1: ToReal_1d, c2: CoFloating_1d) -> Array_1d[np.floating]: ...
@overload
def chebdiv(c1: CoFloating_1d, c2: ToReal_1d) -> Array_1d[np.floating]: ...
@overload
def chebdiv(c1: ToComplex128_1d, c2: CoComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebdiv(c1: CoComplex128_1d, c2: ToComplex128_1d) -> Array_1d[np.complex128]: ...
@overload
def chebdiv(c1: ToComplex_1d, c2: CoComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebdiv(c1: CoComplex_1d, c2: ToComplex_1d) -> Array_1d[np.complexfloating]: ...
@overload
def chebdiv(c1: ToObject_1d, c2: _ToNumeric_1d) -> Array_1d[np.object_]: ...
@overload
def chebdiv(c1: _ToNumeric_1d, c2: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebpow(c: ToFloat64_1d | CoInteger_nd, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.float64]: ...
@overload
def chebpow(c: CoFloating_1d, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.floating]: ...
@overload
def chebpow(c: ToComplex128_1d, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.complex128]: ...
@overload
def chebpow(c: ToComplex_1d, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.complexfloating]: ...
@overload
def chebpow(c: CoComplex_1d, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.inexact]: ...
@overload
def chebpow(c: ToObject_1d, pow: CoInteger_0d, maxpower: CoInteger_0d | None = None) -> Array_1d[np.object_]: ...

#
@overload
def chebder(c: ToFloat64_nd | CoInteger_nd, m: CanIndex = 1, scl: CoFloating_0d = 1, axis: CanIndex = 0) -> Array[np.float64]: ...
@overload
def chebder(c: ToFloating_nd, m: CanIndex = 1, scl: CoFloating_0d = 1, axis: CanIndex = 0) -> Array[np.floating]: ...
@overload
def chebder(c: ToComplex128_nd, m: CanIndex = 1, scl: CoComplex_0d = 1, axis: CanIndex = 0) -> Array[np.complex128]: ...
@overload
def chebder(c: ToComplex_nd, m: CanIndex = 1, scl: CoComplex_0d = 1, axis: CanIndex = 0) -> Array[np.complexfloating]: ...
@overload
def chebder(c: CoComplex_nd, m: CanIndex = 1, scl: CoComplex_0d = 1, axis: CanIndex = 0) -> Array[np.inexact]: ...
@overload
def chebder(c: ToObject_nd, m: CanIndex = 1, scl: _ToNumeric_0d = 1, axis: CanIndex = 0) -> Array[np.object_]: ...

#
@overload
def chebint(
    c: ToFloat64_nd | CoInteger_nd,
    m: CanIndex = 1,
    k: CoFloat64_0d | CoFloat64_1d = [],
    lbnd: CoFloating_0d = 0,
    scl: CoFloating_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.float64]: ...
@overload
def chebint(
    c: CoFloating_nd,
    m: CanIndex = 1,
    k: CoFloating_0d | CoFloating_1d = [],
    lbnd: CoFloating_0d = 0,
    scl: CoFloating_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.floating]: ...
@overload
def chebint(
    c: ToComplex_nd,
    m: CanIndex = 1,
    k: CoComplex_0d | CoComplex_1d = [],
    lbnd: CoComplex_0d = 0,
    scl: CoComplex_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.complexfloating]: ...
@overload
def chebint(
    c: CoComplex_nd,
    m: CanIndex,
    k: ToComplex_0d | ToComplex_1d,
    lbnd: CoComplex_0d = 0,
    scl: CoComplex_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.complexfloating]: ...
@overload
def chebint(
    c: CoComplex_nd,
    m: CanIndex = 1,
    *,
    k: ToComplex_0d | ToComplex_1d,
    lbnd: CoComplex_0d = 0,
    scl: CoComplex_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.complexfloating]: ...
@overload
def chebint(
    c: ToObject_nd,
    m: CanIndex = 1,
    k: _ToNumeric_0d | _ToNumeric_1d = [],
    lbnd: _ToNumeric_0d = 0,
    scl: _ToNumeric_0d = 1,
    axis: CanIndex = 0,
) -> Array[np.object_]: ...

#
@overload
def chebval(x: ToFloat64_0d, c: CoFloat64_1d, tensor: bool = True) -> np.float64: ...
@overload
def chebval(x: CoFloat64_0d, c: ToFloat64_1d, tensor: bool = True) -> np.float64: ...
@overload
def chebval(x: CoFloating_0d, c: CoFloating_1d, tensor: bool = True) -> np.floating: ...
@overload
def chebval(x: ToComplex_0d, c: CoComplex_1d, tensor: bool = True) -> np.complexfloating: ...
@overload
def chebval(x: CoComplex_0d, c: ToComplex_1d, tensor: bool = True) -> np.complexfloating: ...
@overload
def chebval(x: ToFloat64_1nd, c: CoFloat64_1nd, tensor: bool = True) -> Array[np.float64]: ...
@overload
def chebval(x: CoFloat64_1nd, c: ToFloat64_1nd, tensor: bool = True) -> Array[np.float64]: ...
@overload
def chebval(x: CoFloating_1nd, c: CoFloating_1nd, tensor: bool = True) -> Array[np.floating]: ...
@overload
def chebval(x: ToComplex_1nd, c: CoComplex_1nd, tensor: bool = True) -> Array[np.complexfloating]: ...
@overload
def chebval(x: CoComplex_1nd, c: ToComplex_1nd, tensor: bool = True) -> Array[np.complexfloating]: ...
@overload
def chebval(x: ToObject_1nd, c: _ToNumeric_nd, tensor: bool = True) -> Array[np.object_]: ...
@overload
def chebval(x: _ToNumeric_nd, c: ToObject_1nd, tensor: bool = True) -> Array[np.object_]: ...

#
@overload
def chebval2d(x: ToFloat64_0d, y: CoFloat64_0d, c: CoFloat64_1d) -> np.float64: ...
@overload
def chebval2d(x: CoFloat64_0d, y: ToFloat64_0d, c: CoFloat64_1d) -> np.float64: ...
@overload
def chebval2d(x: CoFloat64_0d, y: CoFloat64_0d, c: ToFloat64_1d) -> np.float64: ...
@overload
def chebval2d(x: CoFloating_0d, y: CoFloating_0d, c: CoFloating_1d) -> np.floating: ...
@overload
def chebval2d(x: ToComplex_0d, y: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebval2d(x: CoComplex_0d, y: ToComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebval2d(x: CoComplex_0d, y: CoComplex_0d, c: ToComplex_1d) -> np.complexfloating: ...
@overload
def chebval2d(x: ToFloat64_1nd, y: CoFloat64_nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: CoFloat64_1nd, y: ToFloat64_nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: CoFloat64_1nd, y: CoFloat64_nd, c: ToFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: ToFloat64_nd, y: CoFloat64_1nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: CoFloat64_nd, y: ToFloat64_1nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: CoFloat64_nd, y: CoFloat64_1nd, c: ToFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebval2d(x: CoFloating_1nd, y: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebval2d(x: CoFloating_nd, y: CoFloating_1nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebval2d(x: ToComplex_1nd, y: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: CoComplex_1nd, y: ToComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: CoComplex_1nd, y: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: ToComplex_nd, y: CoComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: CoComplex_nd, y: ToComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: CoComplex_nd, y: CoComplex_1nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval2d(x: ToObject_1nd, y: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebval2d(x: _ToNumeric_nd, y: ToObject_1nd, c: _ToNumeric_nd) -> Array[np.object_]: ...

# keep in sync with *val2d
@overload
def chebgrid2d(x: ToFloat64_0d, y: CoFloat64_0d, c: CoFloat64_1d) -> np.float64: ...
@overload
def chebgrid2d(x: CoFloat64_0d, y: ToFloat64_0d, c: CoFloat64_1d) -> np.float64: ...
@overload
def chebgrid2d(x: CoFloat64_0d, y: CoFloat64_0d, c: ToFloat64_1d) -> np.float64: ...
@overload
def chebgrid2d(x: CoFloating_0d, y: CoFloating_0d, c: CoFloating_1d) -> np.floating: ...
@overload
def chebgrid2d(x: ToComplex_0d, y: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid2d(x: CoComplex_0d, y: ToComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid2d(x: CoComplex_0d, y: CoComplex_0d, c: ToComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid2d(x: ToFloat64_1nd, y: CoFloat64_nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: CoFloat64_1nd, y: ToFloat64_nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: CoFloat64_1nd, y: CoFloat64_nd, c: ToFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: ToFloat64_nd, y: CoFloat64_1nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: CoFloat64_nd, y: ToFloat64_1nd, c: CoFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: CoFloat64_nd, y: CoFloat64_1nd, c: ToFloat64_1nd) -> Array[np.float64]: ...
@overload
def chebgrid2d(x: CoFloating_1nd, y: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebgrid2d(x: CoFloating_nd, y: CoFloating_1nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebgrid2d(x: ToComplex_1nd, y: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: CoComplex_1nd, y: ToComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: CoComplex_1nd, y: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: ToComplex_nd, y: CoComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: CoComplex_nd, y: ToComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: CoComplex_nd, y: CoComplex_1nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid2d(x: ToObject_1nd, y: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebgrid2d(x: _ToNumeric_nd, y: ToObject_1nd, c: _ToNumeric_nd) -> Array[np.object_]: ...

#
@overload
def chebval3d(x: CoFloating_0d, y: CoFloating_0d, z: CoFloating_0d, c: CoFloating_1d) -> np.floating: ...
@overload
def chebval3d(x: CoFloating_1nd, y: CoFloating_nd, z: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebval3d(x: CoFloating_nd, y: CoFloating_1nd, z: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebval3d(x: CoFloating_nd, y: CoFloating_nd, z: CoFloating_1nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebval3d(x: ToComplex_0d, y: CoComplex_0d, z: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebval3d(x: CoComplex_0d, y: ToComplex_0d, z: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebval3d(x: CoComplex_0d, y: CoComplex_0d, z: ToComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebval3d(x: CoComplex_0d, y: CoComplex_0d, z: CoComplex_0d, c: ToComplex_1d) -> np.complexfloating: ...
@overload
def chebval3d(x: ToComplex_1nd, y: CoComplex_nd, z: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: CoComplex_nd, y: ToComplex_1nd, z: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: CoComplex_nd, y: CoComplex_nd, z: ToComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: CoComplex_1nd, y: CoComplex_nd, z: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: CoComplex_nd, y: CoComplex_1nd, z: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: CoComplex_nd, y: CoComplex_nd, z: CoComplex_1nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebval3d(x: ToObject_1nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebval3d(x: ToObject_1nd, y: ToObject_1nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebval3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: ToObject_1nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebval3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: ToObject_1nd) -> Array[np.object_]: ...

# keep in sync with *val3d
@overload
def chebgrid3d(x: CoFloating_0d, y: CoFloating_0d, z: CoFloating_0d, c: CoFloating_1d) -> np.floating: ...
@overload
def chebgrid3d(x: CoFloating_1nd, y: CoFloating_nd, z: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebgrid3d(x: CoFloating_nd, y: CoFloating_1nd, z: CoFloating_nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebgrid3d(x: CoFloating_nd, y: CoFloating_nd, z: CoFloating_1nd, c: CoFloating_1nd) -> Array[np.floating]: ...
@overload
def chebgrid3d(x: ToComplex_0d, y: CoComplex_0d, z: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid3d(x: CoComplex_0d, y: ToComplex_0d, z: CoComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid3d(x: CoComplex_0d, y: CoComplex_0d, z: ToComplex_0d, c: CoComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid3d(x: CoComplex_0d, y: CoComplex_0d, z: CoComplex_0d, c: ToComplex_1d) -> np.complexfloating: ...
@overload
def chebgrid3d(x: ToComplex_1nd, y: CoComplex_nd, z: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: CoComplex_nd, y: ToComplex_1nd, z: CoComplex_nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: CoComplex_nd, y: CoComplex_nd, z: ToComplex_1nd, c: CoComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: CoComplex_1nd, y: CoComplex_nd, z: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: CoComplex_nd, y: CoComplex_1nd, z: CoComplex_nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: CoComplex_nd, y: CoComplex_nd, z: CoComplex_1nd, c: ToComplex_1nd) -> Array[np.complexfloating]: ...
@overload
def chebgrid3d(x: ToObject_1nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebgrid3d(x: ToObject_1nd, y: ToObject_1nd, z: _ToNumeric_nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebgrid3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: ToObject_1nd, c: _ToNumeric_nd) -> Array[np.object_]: ...
@overload
def chebgrid3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, c: ToObject_1nd) -> Array[np.object_]: ...

#
@overload
def chebvander(x: ToFloat64_nd | CoInteger_nd, deg: CanIndex) -> Array[np.float64]: ...
@overload
def chebvander(x: CoFloating_nd, deg: CanIndex) -> Array[np.floating]: ...
@overload
def chebvander(x: ToComplex128_nd, deg: CanIndex) -> Array[np.complex128]: ...
@overload
def chebvander(x: ToComplex_nd, deg: CanIndex) -> Array[np.complexfloating]: ...
@overload
def chebvander(x: CoComplex_nd, deg: CanIndex) -> Array[np.inexact]: ...
@overload
def chebvander(x: ToObject_nd, deg: CanIndex) -> Array[np.object_]: ...
@overload
def chebvander(x: _ToNumeric_nd, deg: CanIndex) -> Array[Any]: ...

#
@overload
def chebvander2d(x: ToFloat64_nd, y: CoFloat64_nd, deg: _Indices) -> Array[np.float64]: ...
@overload
def chebvander2d(x: CoFloat64_nd, y: ToFloat64_nd, deg: _Indices) -> Array[np.float64]: ...
@overload
def chebvander2d(x: CoFloating_nd, y: CoFloating_nd, deg: _Indices) -> Array[np.floating]: ...
@overload
def chebvander2d(x: ToComplex_nd, y: CoComplex_nd, deg: _Indices) -> Array[np.complexfloating]: ...
@overload
def chebvander2d(x: CoComplex_nd, y: ToComplex_nd, deg: _Indices) -> Array[np.complexfloating]: ...
@overload
def chebvander2d(x: ToObject_nd, y: _ToNumeric_nd, deg: _Indices) -> Array[np.object_]: ...
@overload
def chebvander2d(x: _ToNumeric_nd, y: ToObject_nd, deg: _Indices) -> Array[np.object_]: ...
@overload
def chebvander2d(x: _ToNumeric_nd, y: _ToNumeric_nd, deg: _Indices) -> Array[Any]: ...

#
@overload
def chebvander3d(x: ToFloat64_nd, y: CoFloat64_nd, z: CoFloat64_nd, deg: _Indices) -> Array[np.float64]: ...
@overload
def chebvander3d(x: CoFloat64_nd, y: ToFloat64_nd, z: CoFloat64_nd, deg: _Indices) -> Array[np.float64]: ...
@overload
def chebvander3d(x: CoFloat64_nd, y: CoFloat64_nd, z: ToFloat64_nd, deg: _Indices) -> Array[np.float64]: ...
@overload
def chebvander3d(x: CoFloating_nd, y: CoFloating_nd, z: CoFloating_nd, deg: _Indices) -> Array[np.floating]: ...
@overload
def chebvander3d(x: ToComplex_nd, y: CoComplex_nd, z: CoComplex_nd, deg: _Indices) -> Array[np.complexfloating]: ...
@overload
def chebvander3d(x: CoComplex_nd, y: ToComplex_nd, z: CoComplex_nd, deg: _Indices) -> Array[np.complexfloating]: ...
@overload
def chebvander3d(x: CoComplex_nd, y: CoComplex_nd, z: ToComplex_nd, deg: _Indices) -> Array[np.complexfloating]: ...
@overload
def chebvander3d(x: ToObject_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, deg: _Indices) -> Array[np.object_]: ...
@overload
def chebvander3d(x: _ToNumeric_nd, y: ToObject_nd, z: _ToNumeric_nd, deg: _Indices) -> Array[np.object_]: ...
@overload
def chebvander3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: ToObject_nd, deg: _Indices) -> Array[np.object_]: ...
@overload
def chebvander3d(x: _ToNumeric_nd, y: _ToNumeric_nd, z: _ToNumeric_nd, deg: _Indices) -> Array[Any]: ...

#
@overload
def chebfit(
    x: ToFloating_1d,
    y: CoFloating_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: ToFloating_1d | None = None,
) -> Array[np.floating]: ...
@overload
def chebfit(
    x: ToFloating_1d,
    y: CoFloating_nd,
    deg: int | CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.floating]: ...
@overload
def chebfit(
    x: ToFloating_1d,
    y: CoFloating_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.floating]: ...
@overload
def chebfit(
    x: ToComplex_1d,
    y: CoComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: ToFloating_1d | None = None,
) -> Array[np.complexfloating]: ...
@overload
def chebfit(
    x: CoComplex_1d,
    y: ToComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: ToFloating_1d | None = None,
) -> Array[np.complexfloating]: ...
@overload
def chebfit(
    x: ToComplex_1d,
    y: CoComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def chebfit(
    x: CoComplex_1d,
    y: ToComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def chebfit(
    x: CoComplex_1d,
    y: ToComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def chebfit(
    x: ToComplex_1d,
    y: CoComplex_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.complexfloating]: ...
@overload
def chebfit(
    x: ToObject_1d,
    y: _ToNumeric_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    full: L[False] = False,
    w: ToFloating_1d | None = None,
) -> Array[np.object_]: ...
@overload
def chebfit(
    x: _ToNumeric_1d,
    y: ToObject_nd,
    deg: int | CoInteger_1d,
    rcond: float | None,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...
@overload
def chebfit(
    x: ToObject_1d,
    y: _ToNumeric_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...
@overload
def chebfit(
    x: _ToNumeric_1d,
    y: ToObject_nd,
    deg: int | CoInteger_1d,
    rcond: float | None = None,
    *,
    full: L[True],
    w: ToFloating_1d | None = None,
) -> _ArrayAndFitResult[np.object_]: ...

#
@overload
def chebcompanion(c: CoFloating_1d) -> Array_2d[np.float64]: ...
@overload
def chebcompanion(c: ToComplex_1d) -> Array_2d[np.complex128]: ...
@overload
def chebcompanion(c: ToObject_1d) -> Array_2d[np.object_]: ...

#
@overload
def chebroots(c: CoFloating_1d) -> Array_1d[np.float64]: ...
@overload
def chebroots(c: ToComplex_1d) -> Array_1d[np.complex128]: ...
@overload
def chebroots(c: ToObject_1d) -> Array_1d[np.object_]: ...

#
@overload
def chebweight(x: CoFloating_nd) -> Array[np.float64]: ...
@overload
def chebweight(x: ToComplex_nd) -> Array[np.complex128]: ...
@overload
def chebweight(x: ToObject_nd) -> Array[np.object_]: ...

#
def chebgauss(deg: CanIndex) -> tuple[Array_1d[np.float64], Array_1d[np.float64]]: ...
def chebpts1(npts: CanIndex) -> Array_1d[np.float64]: ...
def chebpts2(npts: CanIndex) -> Array_1d[np.float64]: ...

###

_NumberT = TypeVar("_NumberT", bound=np.number | np.object_)

@overload
def chebinterpolate(
    func: np.ufunc,
    deg: CoInteger_0d,
    args: Iterable[object] = (),
) -> Array[np.float64]: ...
@overload
def chebinterpolate(
    func: Callable[Concatenate[Array_1d[np.float64], ...], _ArrayLike[_NumberT]],
    deg: CoInteger_0d,
    args: Iterable[object] = (),
) -> Array_1d[_NumberT]: ...

#
def _cseries_to_zseries(c: Array[_NumberT]) -> Array_1d[_NumberT]: ...
def _zseries_to_cseries(zs: Array[_NumberT]) -> Array_1d[_NumberT]: ...
def _zseries_mul(z1: Array[_NumberT], z2: Array[_NumberT]) -> Array_1d[_NumberT]: ...
def _zseries_div(z1: Array[_NumberT], z2: Array[_NumberT]) -> Array_1d[_NumberT]: ...
def _zseries_der(zs: Array[_NumberT]) -> Array_1d[_NumberT]: ...
def _zseries_int(zs: Array[_NumberT]) -> Array_1d[_NumberT]: ...
