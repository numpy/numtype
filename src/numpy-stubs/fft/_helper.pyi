from typing import Any, Final, Literal as L, TypeAlias, overload
from typing_extensions import TypeVar

import _numtype as _nt
import numpy as np
from numpy._typing import _ShapeLike

__all__ = ["fftfreq", "fftshift", "ifftshift", "rfftfreq"]

###

_ShapeT = TypeVar("_ShapeT", bound=_nt.Shape)
_ScalarT = TypeVar("_ScalarT", bound=np.generic)

_Device: TypeAlias = L["cpu"]
_Int: TypeAlias = int | np.integer
_Floating64Max: TypeAlias = np.float64 | np.float32 | np.float16
_CFloating64Max: TypeAlias = np.complex128 | np.complex64

###

integer_types: Final[tuple[type[int], type[np.integer]]] = ...

# keep in sync with `ifftshift`
@overload
def fftshift(x: _nt.ToBool_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.bool]: ...
@overload
def fftshift(x: _nt.ToBool_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.bool]: ...
@overload
def fftshift(x: _nt.CanLenArray[_ScalarT, _ShapeT], axes: _ShapeLike | None = None) -> _nt.Array[_ScalarT, _ShapeT]: ...
@overload
def fftshift(x: _nt.ToInt_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.intp]: ...
@overload
def fftshift(x: _nt.ToInt_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.intp]: ...
@overload
def fftshift(x: _nt.ToFloat64_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.float64]: ...
@overload
def fftshift(x: _nt.ToFloat64_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.float64]: ...
@overload
def fftshift(x: _nt.ToComplex128_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.complex128]: ...
@overload
def fftshift(x: _nt.ToComplex128_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.complex128]: ...
@overload
def fftshift(x: _nt.ToBytes_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.bytes_]: ...
@overload
def fftshift(x: _nt.ToBytes_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.bytes_]: ...
@overload
def fftshift(x: _nt.ToStr_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.str_]: ...
@overload
def fftshift(x: _nt.ToStr_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.str_]: ...
@overload
def fftshift(x: _nt.ToGeneric_1nd, axes: _ShapeLike | None = None) -> _nt.Array[Any]: ...

# keep in sync with `fftshift`
@overload
def ifftshift(x: _nt.ToBool_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.bool]: ...
@overload
def ifftshift(x: _nt.ToBool_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.bool]: ...
@overload
def ifftshift(
    x: _nt.CanLenArray[_ScalarT, _ShapeT], axes: _ShapeLike | None = None
) -> _nt.Array[_ScalarT, _ShapeT]: ...
@overload
def ifftshift(x: _nt.ToInt_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.intp]: ...
@overload
def ifftshift(x: _nt.ToInt_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.intp]: ...
@overload
def ifftshift(x: _nt.ToFloat64_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.float64]: ...
@overload
def ifftshift(x: _nt.ToFloat64_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.float64]: ...
@overload
def ifftshift(x: _nt.ToComplex128_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.complex128]: ...
@overload
def ifftshift(x: _nt.ToComplex128_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.complex128]: ...
@overload
def ifftshift(x: _nt.ToBytes_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.bytes_]: ...
@overload
def ifftshift(x: _nt.ToBytes_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.bytes_]: ...
@overload
def ifftshift(x: _nt.ToStr_1d, axes: _ShapeLike | None = None) -> _nt.Array1D[np.str_]: ...
@overload
def ifftshift(x: _nt.ToStr_1nd, axes: _ShapeLike | None = None) -> _nt.Array[np.str_]: ...
@overload
def ifftshift(x: _nt.ToGeneric_1nd, axes: _ShapeLike | None = None) -> _nt.Array[Any]: ...

# keep in sync with `rfftfreq`
@overload  # 0d float | integer -> 1d float64
def fftfreq(n: _Int, d: float | _nt.co_integer = 1.0, device: _Device | None = None) -> _nt.Array1D[np.float64]: ...
@overload  # 0d longdouble -> 1d longdouble
def fftfreq(n: _Int, d: np.longdouble, device: _Device | None = None) -> _nt.Array1D[np.longdouble]: ...
@overload  # 0d float{16,32,64} -> 1d float64
def fftfreq(n: _Int, d: _Floating64Max, device: _Device | None = None) -> _nt.Array1D[np.float64]: ...
@overload  # 0d complex -> 1d complex128
def fftfreq(n: _Int, d: _nt.JustComplex, device: _Device | None = None) -> _nt.Array1D[np.complex128]: ...
@overload  # 0d clongdouble -> 1d clongdouble
def fftfreq(n: _Int, d: np.clongdouble, device: _Device | None = None) -> _nt.Array1D[np.clongdouble]: ...
@overload  # 0d complex{64,128} -> 1d complex128
def fftfreq(n: _Int, d: _CFloating64Max, device: _Device | None = None) -> _nt.Array1D[np.complex128]: ...
@overload  # Nd +integer -> Nd float64
def fftfreq(
    n: _Int, d: _nt.Array[_nt.co_integer, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.float64, _ShapeT]: ...
@overload  # Nd longdouble -> Nd longdouble
def fftfreq(
    n: _Int, d: _nt.Array[np.longdouble, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.longdouble, _ShapeT]: ...
@overload  # Nd float{16,32,64} -> Nd float64
def fftfreq(
    n: _Int, d: _nt.Array[_Floating64Max, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.float64, _ShapeT]: ...
@overload  # Nd complex longdouble -> Nd complex longdouble
def fftfreq(
    n: _Int, d: _nt.Array[np.clongdouble, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.clongdouble, _ShapeT]: ...
@overload  # Nd complex{64,128} -> Nd complex128
def fftfreq(
    n: _Int, d: _nt.Array[_CFloating64Max, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.complex128, _ShapeT]: ...
@overload  # ?d +floating -> Nd floating
def fftfreq(
    n: _Int, d: float | _nt.co_float | _nt.Array[_nt.co_float] = 1.0, device: _Device | None = None
) -> _nt.Array[np.floating]: ...
@overload  # ?d +complex -> Nd inexact
def fftfreq(
    n: _Int, d: complex | _nt.co_complex | _nt.Array[_nt.co_complex] = 1.0, device: _Device | None = None
) -> _nt.Array[np.inexact]: ...

# keep in sync with `fftfreq`
@overload  # 0d float | integer -> 1d float64
def rfftfreq(n: _Int, d: float | _nt.co_integer = 1.0, device: _Device | None = None) -> _nt.Array1D[np.float64]: ...
@overload  # 0d longdouble -> 1d longdouble
def rfftfreq(n: _Int, d: np.longdouble, device: _Device | None = None) -> _nt.Array1D[np.longdouble]: ...
@overload  # 0d float{16,32,64} -> 1d float64
def rfftfreq(n: _Int, d: _Floating64Max, device: _Device | None = None) -> _nt.Array1D[np.float64]: ...
@overload  # 0d complex -> 1d complex128
def rfftfreq(n: _Int, d: _nt.JustComplex, device: _Device | None = None) -> _nt.Array1D[np.complex128]: ...
@overload  # 0d clongdouble -> 1d clongdouble
def rfftfreq(n: _Int, d: np.clongdouble, device: _Device | None = None) -> _nt.Array1D[np.clongdouble]: ...
@overload  # 0d complex{64,128} -> 1d complex128
def rfftfreq(n: _Int, d: _CFloating64Max, device: _Device | None = None) -> _nt.Array1D[np.complex128]: ...
@overload  # Nd +integer -> Nd float64
def rfftfreq(
    n: _Int, d: _nt.Array[_nt.co_integer, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.float64, _ShapeT]: ...
@overload  # Nd longdouble -> Nd longdouble
def rfftfreq(
    n: _Int, d: _nt.Array[np.longdouble, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.longdouble, _ShapeT]: ...
@overload  # Nd float{16,32,64} -> Nd float64
def rfftfreq(
    n: _Int, d: _nt.Array[_Floating64Max, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.float64, _ShapeT]: ...
@overload  # Nd complex longdouble -> Nd complex longdouble
def rfftfreq(
    n: _Int, d: _nt.Array[np.clongdouble, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.clongdouble, _ShapeT]: ...
@overload  # Nd complex{64,128} -> Nd complex128
def rfftfreq(
    n: _Int, d: _nt.Array[_CFloating64Max, _ShapeT], device: _Device | None = None
) -> _nt.Array[np.complex128, _ShapeT]: ...
@overload  # ?d +floating -> Nd floating
def rfftfreq(
    n: _Int, d: float | _nt.co_float | _nt.Array[_nt.co_float] = 1.0, device: _Device | None = None
) -> _nt.Array[np.floating]: ...
@overload  # ?d +complex -> Nd inexact
def rfftfreq(
    n: _Int, d: complex | _nt.co_complex | _nt.Array[_nt.co_complex] = 1.0, device: _Device | None = None
) -> _nt.Array[np.inexact]: ...
