from collections.abc import Iterator
from typing import Any, Protocol, final
from typing_extensions import TypeVar

__all__ = ["_NestedSequence"]

_T_co = TypeVar("_T_co", covariant=True)

@final
class _NestedSequence(Protocol[_T_co]):
    def __len__(self, /) -> int: ...
    def __contains__(self, x: object, /) -> bool: ...
    def __getitem__(self, index: int, /) -> _T_co | _NestedSequence[_T_co]: ...
    def __iter__(self, /) -> Iterator[_T_co] | Iterator[_NestedSequence[_T_co]]: ...
    def __reversed__(self, /) -> Iterator[_T_co] | Iterator[_NestedSequence[_T_co]]: ...
    def count(self, value: Any, /) -> int: ...
    def index(self, value: Any, /) -> int: ...
