from typing import overload
from typing_extensions import TypeVar

import _numtype as _nt
import numpy as np

__all__ = ["fix", "isneginf", "isposinf"]

###

_ArrayT = TypeVar("_ArrayT", bound=_nt.Array)
_ShapeT = TypeVar("_ShapeT", bound=_nt.Shape)
_RealT = TypeVar("_RealT", bound=np.integer | np.floating | np.object_)

###

#
@overload
def fix(x: _nt.CoFloating_nd, out: _ArrayT) -> _ArrayT: ...
@overload
def fix(x: _ArrayT, out: None) -> _ArrayT: ...
@overload
def fix(x: _nt.ToBool_0d, out: None = None) -> np.bool: ...
@overload
def fix(x: _nt.ToInt_0d, out: None = None) -> np.intp: ...
@overload
def fix(x: _nt.ToFloat64_0d, out: None = None) -> np.float64: ...
@overload
def fix(x: _nt.CanArray0D[_RealT], out: None = None) -> _RealT: ...
@overload
def fix(x: _nt._ToArray_1ds[_RealT], out: None = None) -> _nt.Array1D[_RealT]: ...
@overload
def fix(x: _nt._ToArray_2ds[_RealT], out: None = None) -> _nt.Array2D[_RealT]: ...
@overload
def fix(x: _nt._ToArray_3ds[_RealT], out: None = None) -> _nt.Array3D[_RealT]: ...
@overload
def fix(x: _nt.ToBool_1nd, out: None = None) -> _nt.Array[np.bool]: ...
@overload
def fix(x: _nt.ToInt_1nd, out: None = None) -> _nt.Array[np.intp]: ...
@overload
def fix(x: _nt.ToFloat64_1nd, out: None = None) -> _nt.Array[np.float64]: ...
@overload
def fix(x: _nt._ToArray_1nd[_RealT], out: None = None) -> _nt.Array[_RealT]: ...

#
@overload
def isposinf(x: _nt.CoFloating_0d, out: None = None) -> np.bool: ...
@overload
def isposinf(x: _nt.CanLenArray[_nt.co_float, _ShapeT], out: None = None) -> _nt.Array[np.bool, _ShapeT]: ...
@overload
def isposinf(x: _nt.CoFloating_1ds, out: None = None) -> _nt.Array1D[np.bool]: ...
@overload
def isposinf(x: _nt.CoFloating_2ds, out: None = None) -> _nt.Array2D[np.bool]: ...
@overload
def isposinf(x: _nt.CoFloating_3ds, out: None = None) -> _nt.Array3D[np.bool]: ...
@overload
def isposinf(x: _nt.CoFloating_1nd, out: None = None) -> _nt.Array[np.bool]: ...
@overload
def isposinf(x: _nt.CoFloating_nd, out: _ArrayT) -> _ArrayT: ...

#
@overload
def isneginf(x: _nt.CoFloating_0d, out: None = None) -> np.bool: ...
@overload
def isneginf(x: _nt.CanLenArray[_nt.co_float, _ShapeT], out: None = None) -> _nt.Array[np.bool, _ShapeT]: ...
@overload
def isneginf(x: _nt.CoFloating_1ds, out: None = None) -> _nt.Array1D[np.bool]: ...
@overload
def isneginf(x: _nt.CoFloating_2ds, out: None = None) -> _nt.Array2D[np.bool]: ...
@overload
def isneginf(x: _nt.CoFloating_3ds, out: None = None) -> _nt.Array3D[np.bool]: ...
@overload
def isneginf(x: _nt.CoFloating_1nd, out: None = None) -> _nt.Array[np.bool]: ...
@overload
def isneginf(x: _nt.CoFloating_nd, out: _ArrayT) -> _ArrayT: ...
