import abc
from typing import Any, Generic, Literal as L, TypeAlias, type_check_only
from typing_extensions import Self, TypeVar, override

import numpy as np

__all__ = ["NDArrayOperatorsMixin"]

###

_T_contra = TypeVar("_T_contra", contravariant=True, default=Any)
_T_co = TypeVar("_T_co", covariant=True, default=Any)

_AnyArray: TypeAlias = np.ndarray[Any, np.dtype[Any]]

###

# NOTE: The accepted input- and output-types of the various dunders are
# completely dependent on how `__array_ufunc__` is implemented.
# As such, only little type safety can be provided here.

class NDArrayOperatorsMixin(Generic[_T_contra, _T_co]):
    __slots__ = ()

    @abc.abstractmethod
    @type_check_only
    def __array_ufunc__(
        self,
        ufunc: np.ufunc,
        method: L["__call__"],
        x: _T_contra,
        /,
        out: tuple[_AnyArray] | tuple[_AnyArray, _AnyArray] | None = None,
    ) -> Self | _T_co | _AnyArray: ...

    #
    @override
    def __eq__(self, x: _T_contra, /) -> _T_co: ...  # type: ignore[override]# pyright: ignore[reportIncompatibleMethodOverride]
    @override
    def __ne__(self, x: _T_contra, /) -> _T_co: ...  # type: ignore[override] # pyright: ignore[reportIncompatibleMethodOverride]
    def __lt__(self, x: _T_contra, /) -> _T_co: ...
    def __le__(self, x: _T_contra, /) -> _T_co: ...
    def __gt__(self, x: _T_contra, /) -> _T_co: ...
    def __ge__(self, x: _T_contra, /) -> _T_co: ...

    #
    def __add__(self, x: _T_contra, /) -> _T_co: ...
    def __radd__(self, x: _T_contra, /) -> _T_co: ...
    def __iadd__(self, x: _T_contra, /) -> Self: ...

    #
    def __sub__(self, x: _T_contra, /) -> _T_co: ...
    def __rsub__(self, x: _T_contra, /) -> _T_co: ...
    def __isub__(self, x: _T_contra, /) -> Self: ...

    #
    def __mul__(self, x: _T_contra, /) -> _T_co: ...
    def __rmul__(self, x: _T_contra, /) -> _T_co: ...
    def __imul__(self, x: _T_contra, /) -> Self: ...

    #
    def __matmul__(self, x: _T_contra, /) -> _T_co: ...
    def __rmatmul__(self, x: _T_contra, /) -> _T_co: ...
    def __imatmul__(self, x: _T_contra, /) -> Self: ...

    #
    def __truediv__(self, x: _T_contra, /) -> _T_co: ...
    def __rtruediv__(self, x: _T_contra, /) -> _T_co: ...
    def __itruediv__(self, x: _T_contra, /) -> Self: ...

    #
    def __floordiv__(self, x: _T_contra, /) -> _T_co: ...
    def __rfloordiv__(self, x: _T_contra, /) -> _T_co: ...
    def __ifloordiv__(self, x: _T_contra, /) -> Self: ...

    #
    def __mod__(self, x: _T_contra, /) -> _T_co: ...
    def __rmod__(self, x: _T_contra, /) -> _T_co: ...
    def __imod__(self, x: _T_contra, /) -> Self: ...

    #
    def __divmod__(self, x: _T_contra, /) -> tuple[Any, Any]: ...
    def __rdivmod__(self, x: _T_contra, /) -> tuple[Any, Any]: ...

    #
    def __pow__(self, x: _T_contra, /) -> _T_co: ...
    def __rpow__(self, x: _T_contra, /) -> _T_co: ...
    def __ipow__(self, x: _T_contra, /) -> Self: ...

    #
    def __lshift__(self, x: _T_contra, /) -> _T_co: ...
    def __rlshift__(self, x: _T_contra, /) -> _T_co: ...
    def __ilshift__(self, x: _T_contra, /) -> Self: ...

    #
    def __rshift__(self, x: _T_contra, /) -> _T_co: ...
    def __rrshift__(self, x: _T_contra, /) -> _T_co: ...
    def __irshift__(self, x: _T_contra, /) -> Self: ...

    #
    def __and__(self, x: _T_contra, /) -> _T_co: ...
    def __rand__(self, x: _T_contra, /) -> _T_co: ...
    def __iand__(self, x: _T_contra, /) -> Self: ...

    #
    def __xor__(self, x: _T_contra, /) -> _T_co: ...
    def __rxor__(self, x: _T_contra, /) -> _T_co: ...
    def __ixor__(self, x: _T_contra, /) -> Self: ...

    #
    def __or__(self, x: _T_contra, /) -> _T_co: ...
    def __ror__(self, x: _T_contra, /) -> _T_co: ...
    def __ior__(self, x: _T_contra, /) -> Self: ...

    #
    def __neg__(self, /) -> _T_co: ...
    def __pos__(self, /) -> _T_co: ...
    def __abs__(self, /) -> _T_co: ...
    def __invert__(self, /) -> _T_co: ...
