import threading
from collections.abc import Sequence
from typing import Any, Literal
from typing_extensions import assert_type

import numpy as np
import numpy.typing as npt
from numpy.random._generator import Generator
from numpy.random._mt19937 import MT19937
from numpy.random._pcg64 import PCG64
from numpy.random._philox import Philox
from numpy.random._sfc64 import SFC64
from numpy.random.bit_generator import SeedSequence, SeedlessSeedSequence

def_gen: np.random.Generator
seed_seq: np.random.SeedSequence
mt19937: np.random.MT19937
pcg64: np.random.PCG64
sfc64: np.random.SFC64
philox: np.random.Philox
seedless_seq: SeedlessSeedSequence

B_arr: npt.NDArray[np.bool]
I_arr: npt.NDArray[np.int_]
D_arr: npt.NDArray[np.float64]

B_arr_like: list[bool]
I_arr_like: list[int]
D_arr_like: list[float]
D_arr_like_2d: list[list[float]]

###

assert_type(def_gen, Generator)
assert_type(mt19937, MT19937)
assert_type(pcg64, PCG64)
assert_type(sfc64, SFC64)
assert_type(philox, Philox)
assert_type(seed_seq, SeedSequence)
assert_type(seedless_seq, SeedlessSeedSequence)

assert_type(mt19937.jumped(), MT19937)
assert_type(mt19937.jumped(3), MT19937)
assert_type(mt19937.random_raw(), int)
assert_type(mt19937.random_raw(5), npt.NDArray[np.uint64])
assert_type(mt19937.lock, threading.Lock)

assert_type(pcg64.jumped(), PCG64)
assert_type(pcg64.jumped(3), PCG64)
assert_type(pcg64.advance(3), PCG64)
assert_type(pcg64.random_raw(), int)
assert_type(pcg64.random_raw(5), npt.NDArray[np.uint64])
assert_type(pcg64.lock, threading.Lock)

assert_type(philox.jumped(), Philox)
assert_type(philox.jumped(3), Philox)
assert_type(philox.advance(3), Philox)
assert_type(philox.random_raw(), int)
assert_type(philox.random_raw(5), npt.NDArray[np.uint64])
assert_type(philox.lock, threading.Lock)

assert_type(sfc64.random_raw(), int)
assert_type(sfc64.random_raw(5), npt.NDArray[np.uint64])
assert_type(sfc64.lock, threading.Lock)

assert_type(seed_seq.pool, npt.NDArray[np.uint32])
assert_type(seed_seq.entropy, int | Sequence[int] | None)
assert_type(seed_seq.spawn(1), list[np.random.SeedSequence])
assert_type(seed_seq.generate_state(8, "uint32"), npt.NDArray[np.uint32])
assert_type(seed_seq.generate_state(8, "uint64"), npt.NDArray[np.uint64])

assert_type(def_gen.standard_normal(), float)
assert_type(def_gen.standard_normal(dtype=np.float32), float)
assert_type(def_gen.standard_normal(dtype="float32"), float)
assert_type(def_gen.standard_normal(dtype="double"), float)
assert_type(def_gen.standard_normal(dtype=np.float64), float)
assert_type(def_gen.standard_normal(size=None), float)
assert_type(def_gen.standard_normal(size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(size=1, dtype=np.float32), npt.NDArray[np.float32])
assert_type(def_gen.standard_normal(size=1, dtype="f4"), npt.NDArray[np.float32])
assert_type(def_gen.standard_normal(size=1, dtype=np.float64), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(size=1, dtype="f8"), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(out=D_arr), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.standard_normal(size=1, dtype="float64", out=D_arr), npt.NDArray[np.float64])

assert_type(def_gen.random(), float)
assert_type(def_gen.random(dtype=np.float32), float)
assert_type(def_gen.random(dtype="float32"), float)
assert_type(def_gen.random(dtype="double"), float)
assert_type(def_gen.random(dtype=np.float64), float)
assert_type(def_gen.random(size=None), float)
assert_type(def_gen.random(size=1), npt.NDArray[np.float64])
assert_type(def_gen.random(size=1, dtype=np.float32), npt.NDArray[np.float32])
assert_type(def_gen.random(size=1, dtype="f4"), npt.NDArray[np.float32])
assert_type(def_gen.random(size=1, dtype=np.float64), npt.NDArray[np.float64])
assert_type(def_gen.random(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.random(size=1, dtype="f8"), npt.NDArray[np.float64])
assert_type(def_gen.random(out=D_arr), npt.NDArray[np.float64])
assert_type(def_gen.random(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.random(size=1, dtype="float64", out=D_arr), npt.NDArray[np.float64])

assert_type(def_gen.standard_cauchy(), float)
assert_type(def_gen.standard_cauchy(size=None), float)
assert_type(def_gen.standard_cauchy(size=1), npt.NDArray[np.float64])

assert_type(def_gen.standard_exponential(), float)
assert_type(def_gen.standard_exponential(method="inv"), float)
assert_type(def_gen.standard_exponential(dtype=np.float32), float)
assert_type(def_gen.standard_exponential(dtype="float32"), float)
assert_type(def_gen.standard_exponential(dtype="double"), float)
assert_type(def_gen.standard_exponential(dtype=np.float64), float)
assert_type(def_gen.standard_exponential(size=None), float)
assert_type(def_gen.standard_exponential(size=None, method="inv"), float)
assert_type(def_gen.standard_exponential(size=1, method="inv"), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(size=1, dtype=np.float32), npt.NDArray[np.float32])
assert_type(def_gen.standard_exponential(size=1, dtype="f4", method="inv"), npt.NDArray[np.float32])
assert_type(def_gen.standard_exponential(size=1, dtype=np.float64, method="inv"), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(size=1, dtype="f8"), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(out=D_arr), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(size=1, dtype="float64"), npt.NDArray[np.float64])
assert_type(def_gen.standard_exponential(size=1, dtype="float64", out=D_arr), npt.NDArray[np.float64])

assert_type(def_gen.zipf(1.5), int)
assert_type(def_gen.zipf(1.5, size=None), int)
assert_type(def_gen.zipf(1.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.zipf(D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.zipf(D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.zipf(D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.zipf(D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.weibull(0.5), float)
assert_type(def_gen.weibull(0.5, size=None), float)
assert_type(def_gen.weibull(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.weibull(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.weibull(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.weibull(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.weibull(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.standard_t(0.5), float)
assert_type(def_gen.standard_t(0.5, size=None), float)
assert_type(def_gen.standard_t(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_t(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.standard_t(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_t(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.standard_t(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.poisson(0.5), int)
assert_type(def_gen.poisson(0.5, size=None), int)
assert_type(def_gen.poisson(0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.poisson(D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.poisson(D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.poisson(D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.poisson(D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.power(0.5), float)
assert_type(def_gen.power(0.5, size=None), float)
assert_type(def_gen.power(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.power(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.power(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.power(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.power(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.pareto(0.5), float)
assert_type(def_gen.pareto(0.5, size=None), float)
assert_type(def_gen.pareto(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.pareto(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.pareto(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.pareto(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.pareto(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.chisquare(0.5), float)
assert_type(def_gen.chisquare(0.5, size=None), float)
assert_type(def_gen.chisquare(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.chisquare(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.chisquare(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.chisquare(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.chisquare(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.exponential(0.5), float)
assert_type(def_gen.exponential(0.5, size=None), float)
assert_type(def_gen.exponential(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.exponential(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.exponential(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.exponential(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.exponential(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.geometric(0.5), int)
assert_type(def_gen.geometric(0.5, size=None), int)
assert_type(def_gen.geometric(0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.geometric(D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.geometric(D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.geometric(D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.geometric(D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.logseries(0.5), int)
assert_type(def_gen.logseries(0.5, size=None), int)
assert_type(def_gen.logseries(0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.logseries(D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.logseries(D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.logseries(D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.logseries(D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.rayleigh(0.5), float)
assert_type(def_gen.rayleigh(0.5, size=None), float)
assert_type(def_gen.rayleigh(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.rayleigh(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.rayleigh(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.rayleigh(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.rayleigh(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.standard_gamma(0.5), float)
assert_type(def_gen.standard_gamma(0.5, size=None), float)
assert_type(def_gen.standard_gamma(0.5, dtype="float32"), float)
assert_type(def_gen.standard_gamma(0.5, size=None, dtype="float32"), float)
assert_type(def_gen.standard_gamma(0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr, dtype="f4"), float | npt.NDArray[np.float32])
assert_type(def_gen.standard_gamma(D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(0.5, out=D_arr), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr_like, out=D_arr), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(def_gen.standard_gamma(D_arr_like, size=1, out=D_arr, dtype=np.float64), npt.NDArray[np.float64])

assert_type(def_gen.vonmises(0.5, 0.5), float)
assert_type(def_gen.vonmises(0.5, 0.5, size=None), float)
assert_type(def_gen.vonmises(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.vonmises(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.vonmises(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.wald(0.5, 0.5), float)
assert_type(def_gen.wald(0.5, 0.5, size=None), float)
assert_type(def_gen.wald(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.wald(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.wald(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.uniform(0.5, 0.5), float)
assert_type(def_gen.uniform(0.5, 0.5, size=None), float)
assert_type(def_gen.uniform(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.uniform(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.uniform(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.beta(0.5, 0.5), float)
assert_type(def_gen.beta(0.5, 0.5, size=None), float)
assert_type(def_gen.beta(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.beta(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.beta(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.f(0.5, 0.5), float)
assert_type(def_gen.f(0.5, 0.5, size=None), float)
assert_type(def_gen.f(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.f(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.f(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.f(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.f(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.gamma(0.5, 0.5), float)
assert_type(def_gen.gamma(0.5, 0.5, size=None), float)
assert_type(def_gen.gamma(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gamma(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gamma(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.gumbel(0.5, 0.5), float)
assert_type(def_gen.gumbel(0.5, 0.5, size=None), float)
assert_type(def_gen.gumbel(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gumbel(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.gumbel(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.laplace(0.5, 0.5), float)
assert_type(def_gen.laplace(0.5, 0.5, size=None), float)
assert_type(def_gen.laplace(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.laplace(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.laplace(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.logistic(0.5, 0.5), float)
assert_type(def_gen.logistic(0.5, 0.5, size=None), float)
assert_type(def_gen.logistic(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.logistic(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.logistic(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.lognormal(0.5, 0.5), float)
assert_type(def_gen.lognormal(0.5, 0.5, size=None), float)
assert_type(def_gen.lognormal(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.lognormal(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.lognormal(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.noncentral_chisquare(0.5, 0.5), float)
assert_type(def_gen.noncentral_chisquare(0.5, 0.5, size=None), float)
assert_type(def_gen.noncentral_chisquare(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_chisquare(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.normal(0.5, 0.5), float)
assert_type(def_gen.normal(0.5, 0.5, size=None), float)
assert_type(def_gen.normal(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(def_gen.normal(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.normal(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.triangular(0.1, 0.5, 0.9), float)
assert_type(def_gen.triangular(0.1, 0.5, 0.9, size=None), float)
assert_type(def_gen.triangular(0.1, 0.5, 0.9, size=1), npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr, 0.5, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(0.1, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr, 0.5, D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(def_gen.triangular(0.1, D_arr, 0.9, size=1), npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr_like, 0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(0.5, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr_like, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr, D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.triangular(D_arr_like, D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.noncentral_f(0.1, 0.5, 0.9), float)
assert_type(def_gen.noncentral_f(0.1, 0.5, 0.9, size=None), float)
assert_type(def_gen.noncentral_f(0.1, 0.5, 0.9, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr, 0.5, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(0.1, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr, 0.5, D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(0.1, D_arr, 0.9, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr_like, 0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(0.5, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr_like, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr, D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(def_gen.noncentral_f(D_arr_like, D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(def_gen.binomial(10, 0.5), int)
assert_type(def_gen.binomial(10, 0.5, size=None), int)
assert_type(def_gen.binomial(10, 0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr, 0.5), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(10, D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr, 0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.binomial(10, D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr_like, 0.5), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(10, D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr, D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr_like, D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr, D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.binomial(I_arr_like, D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.negative_binomial(10, 0.5), int)
assert_type(def_gen.negative_binomial(10, 0.5, size=None), int)
assert_type(def_gen.negative_binomial(10, 0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr, 0.5), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(10, D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr, 0.5, size=1), npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(10, D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr_like, 0.5), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(10, D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr, D_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr_like, D_arr_like), int | npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr, D_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.negative_binomial(I_arr_like, D_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.hypergeometric(20, 20, 10), int)
assert_type(def_gen.hypergeometric(20, 20, 10, size=None), int)
assert_type(def_gen.hypergeometric(20, 20, 10, size=1), npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr, 20, 10), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(20, I_arr, 10), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr, 20, I_arr_like, size=1), npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(20, I_arr, 10, size=1), npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr_like, 20, I_arr), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(20, I_arr_like, 10), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr, I_arr, 10), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr_like, I_arr_like, 10), int | npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr, I_arr, I_arr, size=1), npt.NDArray[np.int64])
assert_type(def_gen.hypergeometric(I_arr_like, I_arr_like, I_arr_like, size=1), npt.NDArray[np.int64])

assert_type(def_gen.integers(0, 100), np.int64)
assert_type(def_gen.integers(100), np.int64)
assert_type(def_gen.integers([100]), np.int64 | npt.NDArray[np.int64])
assert_type(def_gen.integers(0, [100]), np.int64 | npt.NDArray[np.int64])

assert_type(def_gen.integers(2, dtype=bool), bool)
assert_type(def_gen.integers(0, 2, dtype=bool), bool)
assert_type(def_gen.integers(B_arr_like, 1, dtype=bool, endpoint=True), bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(B_arr, dtype=bool), bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(B_arr, B_arr, dtype=bool), bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(0, B_arr, dtype=bool), bool | npt.NDArray[np.bool])

# NOTE: For some inexplicable reason, mypy turns the `bool` types into `False` ones
to_bool: type[np.bool[bool]]
assert_type(def_gen.integers(2, dtype=to_bool), np.bool)
assert_type(def_gen.integers(0, 2, dtype=to_bool), np.bool)
assert_type(def_gen.integers(B_arr_like, 1, dtype=to_bool, endpoint=True), np.bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(B_arr, B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])
assert_type(def_gen.integers(0, B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])

I_arr_u1: npt.NDArray[np.uint8] = ...
to_u1: Literal["u1", "uint8"] | type[np.uint8]

assert_type(def_gen.integers(256, dtype=to_u1), np.uint8)
assert_type(def_gen.integers(0, 256, dtype=to_u1), np.uint8)
assert_type(def_gen.integers(I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])
assert_type(def_gen.integers(I_arr_u1, I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])
assert_type(def_gen.integers(0, I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])

I_arr_i2: npt.NDArray[np.int16] = ...
to_i2: Literal["i2", "int16"] | type[np.int16]

assert_type(def_gen.integers(0, dtype=to_i2), np.int16)
assert_type(def_gen.integers(0, 10, dtype=to_i2), np.int16)
assert_type(def_gen.integers(I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])
assert_type(def_gen.integers(I_arr_i2, I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])
assert_type(def_gen.integers(0, I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])

assert_type(def_gen.bit_generator, np.random.BitGenerator)

assert_type(def_gen.bytes(2), bytes)

assert_type(def_gen.choice(5), int)
assert_type(def_gen.choice(5, 3), npt.NDArray[np.int64])
assert_type(def_gen.choice(5, 3, replace=True), npt.NDArray[np.int64])
assert_type(def_gen.choice(5, 3, p=[1 / 5] * 5), npt.NDArray[np.int64])
assert_type(def_gen.choice(5, 3, p=[1 / 5] * 5, replace=False), npt.NDArray[np.int64])

assert_type(def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"]), Any)
assert_type(def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3), npt.NDArray[Any])
assert_type(def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, p=[1 / 4] * 4), npt.NDArray[Any])
assert_type(def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=True), npt.NDArray[Any])
assert_type(
    def_gen.choice(
        ["pooh", "rabbit", "piglet", "Christopher"],
        3,
        replace=False,
        p=np.array([1 / 8, 1 / 8, 1 / 2, 1 / 4]),
    ),
    npt.NDArray[Any],
)

assert_type(def_gen.dirichlet([0.5, 0.5]), npt.NDArray[np.float64])
assert_type(def_gen.dirichlet(np.array([0.5, 0.5])), npt.NDArray[np.float64])
assert_type(def_gen.dirichlet(np.array([0.5, 0.5]), size=3), npt.NDArray[np.float64])

assert_type(def_gen.multinomial(20, [1 / 6.0] * 6), npt.NDArray[np.int64])
assert_type(def_gen.multinomial(20, np.array([0.5, 0.5])), npt.NDArray[np.int64])
assert_type(def_gen.multinomial(20, [1 / 6.0] * 6, size=2), npt.NDArray[np.int64])
assert_type(def_gen.multinomial([[10], [20]], [1 / 6.0] * 6, size=(2, 2)), npt.NDArray[np.int64])
assert_type(def_gen.multinomial(np.array([[10], [20]]), np.array([0.5, 0.5]), size=(2, 2)), npt.NDArray[np.int64])

assert_type(def_gen.multivariate_hypergeometric([3, 5, 7], 2), npt.NDArray[np.int64])
assert_type(def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2), npt.NDArray[np.int64])
assert_type(def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, size=4), npt.NDArray[np.int64])
assert_type(def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, size=(4, 7)), npt.NDArray[np.int64])
assert_type(def_gen.multivariate_hypergeometric([3, 5, 7], 2, method="count"), npt.NDArray[np.int64])
assert_type(def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, method="marginals"), npt.NDArray[np.int64])

assert_type(def_gen.multivariate_normal([0.0], [[1.0]]), npt.NDArray[np.float64])
assert_type(def_gen.multivariate_normal([0.0], np.array([[1.0]])), npt.NDArray[np.float64])
assert_type(def_gen.multivariate_normal(np.array([0.0]), [[1.0]]), npt.NDArray[np.float64])
assert_type(def_gen.multivariate_normal([0.0], np.array([[1.0]])), npt.NDArray[np.float64])

assert_type(def_gen.permutation(10), npt.NDArray[np.int64])
assert_type(def_gen.permutation([1, 2, 3, 4]), npt.NDArray[Any])
assert_type(def_gen.permutation(np.array([1, 2, 3, 4])), npt.NDArray[Any])
assert_type(def_gen.permutation(D_arr, axis=1), npt.NDArray[np.float64])
assert_type(def_gen.permuted(D_arr), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr_like_2d), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr, axis=1), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr, out=D_arr), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr_like_2d, out=D_arr), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr_like_2d, out=D_arr), npt.NDArray[Any])
assert_type(def_gen.permuted(D_arr, axis=1, out=D_arr), npt.NDArray[Any])

assert_type(def_gen.shuffle(np.arange(10)), None)
assert_type(def_gen.shuffle([1, 2, 3, 4, 5]), None)
assert_type(def_gen.shuffle(D_arr, axis=1), None)

assert_type(np.random.Generator(pcg64), np.random.Generator)
assert_type(str(def_gen), str)
assert_type(repr(def_gen), str)
assert_type(def_gen.__setstate__(dict(def_gen.bit_generator.state)), None)

# RandomState
random_st: np.random.RandomState = ...

assert_type(random_st.standard_normal(), float)
assert_type(random_st.standard_normal(size=None), float)
assert_type(random_st.standard_normal(size=1), npt.NDArray[np.float64])

assert_type(random_st.random(), float)
assert_type(random_st.random(size=None), float)
assert_type(random_st.random(size=1), npt.NDArray[np.float64])

assert_type(random_st.standard_cauchy(), float)
assert_type(random_st.standard_cauchy(size=None), float)
assert_type(random_st.standard_cauchy(size=1), npt.NDArray[np.float64])

assert_type(random_st.standard_exponential(), float)
assert_type(random_st.standard_exponential(size=None), float)
assert_type(random_st.standard_exponential(size=1), npt.NDArray[np.float64])

assert_type(random_st.zipf(1.5), int)
assert_type(random_st.zipf(1.5, size=None), int)
assert_type(random_st.zipf(1.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.zipf(D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.zipf(D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.zipf(D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.zipf(D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.weibull(0.5), float)
assert_type(random_st.weibull(0.5, size=None), float)
assert_type(random_st.weibull(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.weibull(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.weibull(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.weibull(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.weibull(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.standard_t(0.5), float)
assert_type(random_st.standard_t(0.5, size=None), float)
assert_type(random_st.standard_t(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.standard_t(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.standard_t(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.standard_t(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.standard_t(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.poisson(0.5), int)
assert_type(random_st.poisson(0.5, size=None), int)
assert_type(random_st.poisson(0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.poisson(D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.poisson(D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.poisson(D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.poisson(D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.power(0.5), float)
assert_type(random_st.power(0.5, size=None), float)
assert_type(random_st.power(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.power(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.power(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.power(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.power(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.pareto(0.5), float)
assert_type(random_st.pareto(0.5, size=None), float)
assert_type(random_st.pareto(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.pareto(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.pareto(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.pareto(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.pareto(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.chisquare(0.5), float)
assert_type(random_st.chisquare(0.5, size=None), float)
assert_type(random_st.chisquare(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.chisquare(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.chisquare(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.chisquare(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.chisquare(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.exponential(0.5), float)
assert_type(random_st.exponential(0.5, size=None), float)
assert_type(random_st.exponential(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.exponential(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.exponential(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.exponential(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.exponential(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.geometric(0.5), int)
assert_type(random_st.geometric(0.5, size=None), int)
assert_type(random_st.geometric(0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.geometric(D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.geometric(D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.geometric(D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.geometric(D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.logseries(0.5), int)
assert_type(random_st.logseries(0.5, size=None), int)
assert_type(random_st.logseries(0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.logseries(D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.logseries(D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.logseries(D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.logseries(D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.rayleigh(0.5), float)
assert_type(random_st.rayleigh(0.5, size=None), float)
assert_type(random_st.rayleigh(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.rayleigh(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.rayleigh(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.rayleigh(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.rayleigh(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.standard_gamma(0.5), float)
assert_type(random_st.standard_gamma(0.5, size=None), float)
assert_type(random_st.standard_gamma(0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.standard_gamma(D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.standard_gamma(D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.standard_gamma(D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.standard_gamma(D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(random_st.standard_gamma(D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.vonmises(0.5, 0.5), float)
assert_type(random_st.vonmises(0.5, 0.5, size=None), float)
assert_type(random_st.vonmises(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.vonmises(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.vonmises(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.wald(0.5, 0.5), float)
assert_type(random_st.wald(0.5, 0.5, size=None), float)
assert_type(random_st.wald(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.wald(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.wald(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.wald(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.wald(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.uniform(0.5, 0.5), float)
assert_type(random_st.uniform(0.5, 0.5, size=None), float)
assert_type(random_st.uniform(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.uniform(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.uniform(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.beta(0.5, 0.5), float)
assert_type(random_st.beta(0.5, 0.5, size=None), float)
assert_type(random_st.beta(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.beta(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.beta(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.beta(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.beta(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.f(0.5, 0.5), float)
assert_type(random_st.f(0.5, 0.5, size=None), float)
assert_type(random_st.f(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.f(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.f(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.f(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.f(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.f(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.f(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.f(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.f(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.f(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.f(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.gamma(0.5, 0.5), float)
assert_type(random_st.gamma(0.5, 0.5, size=None), float)
assert_type(random_st.gamma(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.gamma(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.gamma(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.gumbel(0.5, 0.5), float)
assert_type(random_st.gumbel(0.5, 0.5, size=None), float)
assert_type(random_st.gumbel(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.gumbel(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.gumbel(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.laplace(0.5, 0.5), float)
assert_type(random_st.laplace(0.5, 0.5, size=None), float)
assert_type(random_st.laplace(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.laplace(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.laplace(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.logistic(0.5, 0.5), float)
assert_type(random_st.logistic(0.5, 0.5, size=None), float)
assert_type(random_st.logistic(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.logistic(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.logistic(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.lognormal(0.5, 0.5), float)
assert_type(random_st.lognormal(0.5, 0.5, size=None), float)
assert_type(random_st.lognormal(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.lognormal(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.lognormal(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.noncentral_chisquare(0.5, 0.5), float)
assert_type(random_st.noncentral_chisquare(0.5, 0.5, size=None), float)
assert_type(random_st.noncentral_chisquare(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_chisquare(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.normal(0.5, 0.5), float)
assert_type(random_st.normal(0.5, 0.5, size=None), float)
assert_type(random_st.normal(0.5, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.normal(0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr, 0.5, size=1), npt.NDArray[np.float64])
assert_type(random_st.normal(0.5, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr_like, 0.5), float | npt.NDArray[np.float64])
assert_type(random_st.normal(0.5, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr_like, D_arr_like), float | npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.normal(D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.triangular(0.1, 0.5, 0.9), float)
assert_type(random_st.triangular(0.1, 0.5, 0.9, size=None), float)
assert_type(random_st.triangular(0.1, 0.5, 0.9, size=1), npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr, 0.5, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(0.1, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr, 0.5, D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(random_st.triangular(0.1, D_arr, 0.9, size=1), npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr_like, 0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(0.5, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr_like, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr, D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.triangular(D_arr_like, D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.noncentral_f(0.1, 0.5, 0.9), float)
assert_type(random_st.noncentral_f(0.1, 0.5, 0.9, size=None), float)
assert_type(random_st.noncentral_f(0.1, 0.5, 0.9, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr, 0.5, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(0.1, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr, 0.5, D_arr_like, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(0.1, D_arr, 0.9, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr_like, 0.5, D_arr), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(0.5, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr, D_arr, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr_like, D_arr_like, 0.9), float | npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr, D_arr, D_arr, size=1), npt.NDArray[np.float64])
assert_type(random_st.noncentral_f(D_arr_like, D_arr_like, D_arr_like, size=1), npt.NDArray[np.float64])

assert_type(random_st.binomial(10, 0.5), int)
assert_type(random_st.binomial(10, 0.5, size=None), int)
assert_type(random_st.binomial(10, 0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr, 0.5), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(10, D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr, 0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.binomial(10, D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr_like, 0.5), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(10, D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr, D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr_like, D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr, D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.binomial(I_arr_like, D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.negative_binomial(10, 0.5), int)
assert_type(random_st.negative_binomial(10, 0.5, size=None), int)
assert_type(random_st.negative_binomial(10, 0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr, 0.5), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(10, D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr, 0.5, size=1), npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(10, D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr_like, 0.5), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(10, D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr, D_arr), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr_like, D_arr_like), int | npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr, D_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.negative_binomial(I_arr_like, D_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.hypergeometric(20, 20, 10), int)
assert_type(random_st.hypergeometric(20, 20, 10, size=None), int)
assert_type(random_st.hypergeometric(20, 20, 10, size=1), npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr, 20, 10), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(20, I_arr, 10), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr, 20, I_arr_like, size=1), npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(20, I_arr, 10, size=1), npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr_like, 20, I_arr), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(20, I_arr_like, 10), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr, I_arr, 10), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr_like, I_arr_like, 10), int | npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr, I_arr, I_arr, size=1), npt.NDArray[np.int_])
assert_type(random_st.hypergeometric(I_arr_like, I_arr_like, I_arr_like, size=1), npt.NDArray[np.int_])

assert_type(random_st.randint(0, 100), int)
assert_type(random_st.randint(100), int)
assert_type(random_st.randint([100]), int | npt.NDArray[np.int_])
assert_type(random_st.randint(0, [100]), int | npt.NDArray[np.int_])

assert_type(random_st.randint(2, dtype=bool), bool)
assert_type(random_st.randint(0, 2, dtype=bool), bool)
assert_type(random_st.randint(B_arr, dtype=bool), bool | npt.NDArray[np.bool])
assert_type(random_st.randint(B_arr, B_arr, dtype=bool), bool | npt.NDArray[np.bool])
assert_type(random_st.randint(0, B_arr, dtype=bool), bool | npt.NDArray[np.bool])

assert_type(random_st.randint(2, dtype=to_bool), np.bool)
assert_type(random_st.randint(0, 2, dtype=to_bool), np.bool)
assert_type(random_st.randint(B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])
assert_type(random_st.randint(B_arr, B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])
assert_type(random_st.randint(0, B_arr, dtype=to_bool), np.bool | npt.NDArray[np.bool])

assert_type(random_st.randint(256, dtype=to_u1), np.uint8)
assert_type(random_st.randint(0, 256, dtype=to_u1), np.uint8)
assert_type(random_st.randint(I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])
assert_type(random_st.randint(I_arr_u1, I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])
assert_type(random_st.randint(0, I_arr_u1, dtype=to_u1), np.uint8 | npt.NDArray[np.uint8])

assert_type(random_st.randint(32768, dtype=to_i2), np.int16)
assert_type(random_st.randint(-32768, 32768, dtype=to_i2), np.int16)
assert_type(random_st.randint(I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])
assert_type(random_st.randint(I_arr_i2, I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])
assert_type(random_st.randint(-32768, I_arr_i2, dtype=to_i2), np.int16 | npt.NDArray[np.int16])

assert_type(random_st._bit_generator, np.random.BitGenerator)

assert_type(random_st.bytes(2), bytes)

assert_type(random_st.choice(5), int)
assert_type(random_st.choice(5, 3), npt.NDArray[np.int_])
assert_type(random_st.choice(5, 3, replace=True), npt.NDArray[np.int_])
assert_type(random_st.choice(5, 3, p=[1 / 5] * 5), npt.NDArray[np.int_])
assert_type(random_st.choice(5, 3, p=[1 / 5] * 5, replace=False), npt.NDArray[np.int_])

assert_type(random_st.choice(["pooh", "rabbit", "piglet", "Christopher"]), Any)
assert_type(random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3), npt.NDArray[Any])
assert_type(random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, p=[1 / 4] * 4), npt.NDArray[Any])
assert_type(random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=True), npt.NDArray[Any])
assert_type(
    random_st.choice(
        ["pooh", "rabbit", "piglet", "Christopher"],
        3,
        replace=False,
        p=np.array([1 / 8, 1 / 8, 1 / 2, 1 / 4]),
    ),
    npt.NDArray[Any],
)

assert_type(random_st.dirichlet([0.5, 0.5]), npt.NDArray[np.float64])
assert_type(random_st.dirichlet(np.array([0.5, 0.5])), npt.NDArray[np.float64])
assert_type(random_st.dirichlet(np.array([0.5, 0.5]), size=3), npt.NDArray[np.float64])

assert_type(random_st.multinomial(20, [1 / 6.0] * 6), npt.NDArray[np.int_])
assert_type(random_st.multinomial(20, np.array([0.5, 0.5])), npt.NDArray[np.int_])
assert_type(random_st.multinomial(20, [1 / 6.0] * 6, size=2), npt.NDArray[np.int_])

assert_type(random_st.multivariate_normal([0.0], [[1.0]]), npt.NDArray[np.float64])
assert_type(random_st.multivariate_normal([0.0], np.array([[1.0]])), npt.NDArray[np.float64])
assert_type(random_st.multivariate_normal(np.array([0.0]), [[1.0]]), npt.NDArray[np.float64])
assert_type(random_st.multivariate_normal([0.0], np.array([[1.0]])), npt.NDArray[np.float64])

assert_type(random_st.permutation(10), npt.NDArray[np.int_])
assert_type(random_st.permutation([1, 2, 3, 4]), npt.NDArray[Any])
assert_type(random_st.permutation(np.array([1, 2, 3, 4])), npt.NDArray[Any])
assert_type(random_st.permutation(D_arr), npt.NDArray[np.float64])

assert_type(random_st.shuffle(np.arange(10)), None)
assert_type(random_st.shuffle([1, 2, 3, 4, 5]), None)
assert_type(random_st.shuffle(D_arr), None)

assert_type(np.random.RandomState(pcg64), np.random.RandomState)
assert_type(np.random.RandomState(0), np.random.RandomState)
assert_type(np.random.RandomState([0, 1, 2]), np.random.RandomState)
assert_type(str(random_st), str)
assert_type(repr(random_st), str)

assert_type(random_st.__getstate__(), dict[str, Any])
assert_type(random_st.__setstate__(random_st.__getstate__()), None)
assert_type(random_st.seed(), None)
assert_type(random_st.seed(1), None)
assert_type(random_st.seed([0, 1]), None)
assert_type(random_st.get_state(legacy=False), dict[str, Any])
assert_type(random_st.get_state(), tuple[str, npt.NDArray[np.uint32], int, int, float])
assert_type(random_st.get_state(legacy=True), tuple[str, npt.NDArray[np.uint32], int, int, float])
assert_type(random_st.set_state(random_st.get_state(legacy=False)), None)

assert_type(random_st.rand(), float)
assert_type(random_st.rand(1), npt.NDArray[np.float64])
assert_type(random_st.rand(1, 2), npt.NDArray[np.float64])
assert_type(random_st.randn(), float)
assert_type(random_st.randn(1), npt.NDArray[np.float64])
assert_type(random_st.randn(1, 2), npt.NDArray[np.float64])
assert_type(random_st.random_sample(), float)
assert_type(random_st.random_sample(1), npt.NDArray[np.float64])
assert_type(random_st.random_sample(size=(1, 2)), npt.NDArray[np.float64])

assert_type(random_st.tomaxint(), int)
assert_type(random_st.tomaxint(1), npt.NDArray[np.int64])
assert_type(random_st.tomaxint((1,)), npt.NDArray[np.int64])

assert_type(np.random.mtrand.set_bit_generator(pcg64), None)
assert_type(np.random.mtrand.get_bit_generator(), np.random.BitGenerator)
